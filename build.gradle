import groovy.json.JsonBuilder

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
    }
}

plugins {
    id 'groovy'
    id 'eclipse'
    id 'maven'
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'com.github.hierynomus.license' version '0.14.0'
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'

// Detect version
version = '1.2.0-SNAPSHOT'

// Human's must change this here and in DetectProperties for every update
final String gradleInspectorVersion = '0.2.2'
final String nugetInspectorVersion = '2.0.0'

final String buildArtifactFolder = "${buildDir}/libs/"
final String gradleAirGapPath = "${buildArtifactFolder}/gradleJars"


// BuildInfo - A json payload usable by detect for information from the build
JsonBuilder jsonBuilder = new JsonBuilder()
jsonBuilder {
    detect version
}
final def buildConfigurationFile = new File("${projectDir}/src/main/resources/buildInfo.json")
buildConfigurationFile.delete()
buildConfigurationFile << jsonBuilder.toPrettyString()

// the override.snaphot property should be set to true for a CI build so
// that the version is omitted from a snapshot build artifact
if (version.contains('SNAPSHOT') && "true" == project.findProperty('override.snapshot')) {
    version = 'latest-SNAPSHOT'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

build {
    finalizedBy 'updateAirGapDependencies'
    
    doLast {
        def shellScriptTemplateFile = new File("${projectDir}/src/main/resources/hub-detect-sh")
        def shellScriptContents = shellScriptTemplateFile.getText('UTF-8')
        if (!version.contains('SNAPSHOT')) {
            String latestReleaseVersion = 'DETECT_LATEST_RELEASE_VERSION=\\${DETECT_LATEST_RELEASE_VERSION:-' + "${version}" + '}\n'
            shellScriptContents = shellScriptContents.replaceFirst("DETECT_LATEST_RELEASE_VERSION=\\S*\n", latestReleaseVersion)
            shellScriptTemplateFile.delete()
            shellScriptTemplateFile << shellScriptContents
        }
        def shellScriptFile = new File("${buildDir}/hub-detect.sh")
        shellScriptFile.delete()
        shellScriptFile << shellScriptContents
        shellScriptFile.setExecutable(true)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

configurations {
    airGapConfig
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-detect-model:0.1.0'
    compile 'com.blackducksoftware.integration:hub-common:14.5.1'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.apache.maven.shared:maven-invoker:3.0.0'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
    compile 'com.moandjiezana.toml:toml4j:0.7.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.11'
    compile 'org.freemarker:freemarker:2.3.26-incubating'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    
    airGapConfig "com.blackducksoftware.integration:integration-gradle-inspector:${gradleInspectorVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

springBoot { mainClass = 'com.blackducksoftware.integration.hub.detect.Application' }

jacocoTestReport {
    reports { xml.enabled = true }
}

license {
    header = file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ignoreFailures = true
    includes (["**/*.groovy", "**/*.java"])
    excludes (["/src/test/*.groovy", "src/test/*.java"])
}

tasks.licenseMain.dependsOn(licenseFormatMain)

void fetchFile(File outputFile, String url) {
    if (outputFile.exists()) {
        return
    }
    if (!outputFile.getParentFile().exists()) {
        outputFile.getParentFile().mkdirs()
    }
    new URL(url).withInputStream{ i -> outputFile.withOutputStream{ it << i }}
}

task zipGradleAirGapDependencies(type: Zip) {
	from configurations.airGapConfig
	include '*.jar'
	archiveName "GradleInspectorAirGap_${gradleInspectorVersion}.zip"
	destinationDir(file(buildArtifactFolder))
} 

task downloadNugetAirGapDependencies {
    doLast {
        final def nugetInspectorUrl = "https://www.nuget.org/api/v2/package/IntegrationNugetInspector/${nugetInspectorVersion}"
        fetchFile(new File(buildArtifactFolder, "NugetInspector_${nugetInspectorVersion}.nupkg"), nugetInspectorUrl)
    }
}

task updateAirGapDependencies {
    dependsOn downloadNugetAirGapDependencies, zipGradleAirGapDependencies
}

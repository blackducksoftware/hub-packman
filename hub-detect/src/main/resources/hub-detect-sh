#!/bin/bash

tempdir="${TEMP:-/tmp}"
javahome=${JAVA_HOME}
if [[ "${OSTYPE}" == "cygwin" ]] ; then
  tempdirnative=$(cygpath -wa "${tempdir}")
  if (( ${#javahome} )) ; then
    javahomeposix=$(cygpath -ua "${javahome}")
  fi
else
  tempdirnative=${tempdir}
  javahomeposix="${javahome}"
fi
if (( ${#javahome} )) ; then
  export PATH="${javahomeposix}/bin:${PATH}"
fi

# DETECT_LATEST_RELEASE_VERSION should be set in your
# environment if you wish to use a version different
# from LATEST.
DETECT_RELEASE_VERSION=${DETECT_LATEST_RELEASE_VERSION}

# If you would like to enable the shell script to use
# the latest snapshot instead of the latest release,
# specify DETECT_USE_SNAPSHOT=1 in your environment.
# The default is to NOT use snapshots. If you enable
# snapshots, the jar file will be downloaded whenever
# a new commit is added to the master branch.
DETECT_USE_SNAPSHOT=${DETECT_USE_SNAPSHOT:-0}

# DETECT_JAR_PATH overrides the location to store the 
# downloaded Hub Detect JAR.  It defaults to
# ${TEMP:-/tmp}.
DETECT_JAR_PATH=${DETECT_JAR_PATH:-${tempdirnative}}

# If you want to pass any java options to the
# invocation, specify DETECT_JAVA_OPTS in your
# environment. For example, to specify a 6 gigabyte
# heap size, you would set DETECT_JAVA_OPTS=-Xmx6G.
DETECT_JAVA_OPTS=${DETECT_JAVA_OPTS:-}

# If you want to pass any additional options to
# curl, specify DETECT_CURL_OPTS in your environment.
# For example, to specify a proxy, you would set
# DETECT_CURL_OPTS="--proxy http://myproxy:3128"
DETECT_CURL_OPTS=${DETECT_CURL_OPTS:-}

script_args=("$@")
loggable_script_args=()
for arg in "${script_args[@]}" ; do
  if [[ "${arg}" =~ ^(.*\.(password|token)[^=]*)=.* ]] ; then
    arg="${BASH_REMATCH[1]}=<redacted>"
  fi
  loggable_script_args+=("${arg}")
done

run() {
  get_detect
  run_detect || return $?
}

get_detect() {
  VERSION_FILE_DESTINATION="${DETECT_JAR_PATH}/hub-detect-latest-commit-id.txt"
  CURRENT_VERSION=""
  if [ -f $VERSION_FILE_DESTINATION ]; then
    CURRENT_VERSION=$( <$VERSION_FILE_DESTINATION )
  fi

  curl -sSL $DETECT_CURL_OPTS -o "${VERSION_FILE_DESTINATION}" https://blackducksoftware.github.io/hub-detect/latest-commit-id.txt
  LATEST_VERSION=$(<"${VERSION_FILE_DESTINATION}")

  if [ $DETECT_USE_SNAPSHOT -eq 1 ]; then
    if [ -z "${DETECT_RELEASE_VERSION}" ]; then
      DETECT_SOURCE="https://test-repo.blackducksoftware.com/artifactory/bds-integrations-snapshot/com/blackducksoftware/integration/hub-detect/latest-SNAPSHOT/hub-detect-latest-SNAPSHOT.jar"
      DETECT_DESTINATION="${DETECT_JAR_PATH}/hub-detect-latest-SNAPSHOT.jar"
      echo "will look for snapshot: ${DETECT_SOURCE}" >&2
    else
      DETECT_SOURCE="https://test-repo.blackducksoftware.com/artifactory/bds-integrations-snapshot/com/blackducksoftware/integration/hub-detect/${DETECT_RELEASE_VERSION}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
      DETECT_DESTINATION="${DETECT_JAR_PATH}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
      echo "will look for release: ${DETECT_SOURCE}" >&2
    fi
  else
    if [ -z "${DETECT_RELEASE_VERSION}" ]; then
      DETECT_RELEASE_VERSION=$(curl -sSL $DETECT_CURL_OPTS 'https://test-repo.blackducksoftware.com/artifactory/api/search/latestVersion?g=com.blackducksoftware.integration&a=hub-detect&repos=bds-integrations-release')
      DETECT_SOURCE="https://test-repo.blackducksoftware.com/artifactory/bds-integrations-release/com/blackducksoftware/integration/hub-detect/${DETECT_RELEASE_VERSION}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
      DETECT_DESTINATION="${DETECT_JAR_PATH}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
    else
      DETECT_SOURCE="https://test-repo.blackducksoftware.com/artifactory/bds-integrations-release/com/blackducksoftware/integration/hub-detect/${DETECT_RELEASE_VERSION}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
      DETECT_DESTINATION="${DETECT_JAR_PATH}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
    fi
    echo "will look for release: ${DETECT_SOURCE}" >&2
  fi

  USE_REMOTE=1
  if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] && [ $DETECT_USE_SNAPSHOT -eq 1 ]; then
    echo "You don't have the latest snapshot, so the new snapshot will be downloaded." >&2
  elif [ ! -f $DETECT_DESTINATION ]; then
    echo "You don't have the current file, so it will be downloaded." >&2
  else
    echo "You have already downloaded the latest file, so the local file will be used." >&2
    USE_REMOTE=0
  fi

  if [ $USE_REMOTE -eq 1 ]; then
    echo "getting ${DETECT_SOURCE} from remote" >&2
    curl -sSL $DETECT_CURL_OPTS -o "${DETECT_DESTINATION}" "${DETECT_SOURCE}"
    echo "saved ${DETECT_SOURCE} to ${DETECT_DESTINATION}" >&2
  fi
}

run_detect() {
  javacmd=(java ${DETECT_JAVA_OPTS} -jar "${DETECT_DESTINATION}")
  type -a java || return -1
  echo "running detect: ${javacmd[*]@Q} ${loggable_script_args[*]@Q}" >&2
  "${javacmd[@]}" "${script_args[@]}" || return $?
}

run
